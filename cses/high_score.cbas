#include <iframe>
#include <bfs>
#include <pii>

@cgmain

@vec[pii][2500] adj;
@vec[int][2500] bdj;
@m bool[2500] in, set, a, b;
ll[2500] score;

fn dfs1(int i):
    a[i] = 1;
    int j;
    for(j=0; j!=adj[i].sz; ++j)
        if(a[adj[i].d[j].a]) continue end
        dfs1(adj[i].d[j].a);
    end
end

fn dfs2(int i):
    b[i] = 1;
    int j;
    for(j=0; j!=bdj[i].sz; ++j)
        if(b[bdj[i].d[j]]) continue end
        dfs2(bdj[i].d[j]);
    end
end

int[2500] count;
int n;

#define now adj[top].d[i]

method inline @bfs[int]:cons(int top):
    in[top] = 0;
    for(i=0; i!=adj[top].sz; ++i)
        if(a[now.a] && b[now.a])
            ll prop = score[top]+now.b;
            if(prop > score[now.a] || !set[now.a])
                score[now.a] = prop;
                set[now.a] = 1;
                if(!in[now.a])
                    in[now.a] = 1;
                    if(++count[now.a] > n)
                        @fmt -1;
                        exit(0);
                    end
                    this:push(now.a);
                end
            end
        end
    end
end

fn pub main -> int:
    int m; @poll n m;

    while(m--)
        @m int a, b, x; @poll a b x;
        adj[a-1]:push(mpii(b-1, x));
        bdj[b-1]:push(a-1);
    end
    
    dfs1(0); dfs2(n-1);

    @bfs[int] q;
    q:push(0); in[0] = 1; set[0] = 1;
    q:spin();

    @fmt score[n-1]
end

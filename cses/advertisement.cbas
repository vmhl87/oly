#include <iframe>
#include <math>

@cgmain

int[4e5] tree;
int n;

fn inline prop(int i):
    tree[i] = @min(tree[i<<1], tree[i<<1|1]);
end

fn inline rmq(int l, int r) -> int:
    l = l + n; r = r + n+1;
    int res = tree[l++];
    while(l<r)
        if(l&1) res = @min(res, tree[l++]) end
        if(r&1) res = @min(res, tree[--r]) end
        l = l/2; r = r/2;
    end
    return res;
end

fn pub main -> int:
    @poll n;
    for(i=0; i!=n; ++i) @poll tree[i+n] end
    for(i=n-1; i; --i) prop(i) end

    ll best = 0;

    for(i=0; i!=n; ++i)
        ll comp = tree[i+n];
        @m int l=i, r=n-1;
        while(l<r)
            int m = (l+r+1)/2;
            if(rmq(i, m) >= tree[i+n]) l = m
            else r = m-1 end
        end
        comp = comp + (l-i)*tree[i+n];
        l=0; r=i;
        while(l<r)
            int m = (l+r)/2;
            if(rmq(m, i) >= tree[i+n]) r = m
            else l = m+1 end
        end
        best = @max(best, comp+(i-l)*tree[i+n]);
    end

    @fmt best;
end

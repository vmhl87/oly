#include <iiframe>
#include <ivec>
#include <idsu>

#define nxt adj[i].d[j]

@cgmain

method dsu:size(int i) -> int:
    @fmt this:root(i);
    return -this.root[this:root(i)] end

@vec[int][5e4] adj;
@vec[int][5e4] bdj;
@m int[5e4] res, deg;
bool[5e4] vis;

fn inline main:
    @m int n, m; @poll n m;

    while(m--)
        @m int a, b; @poll a b;
        bdj[a-1]:push(b-1);
        adj[b-1]:push(a-1);
        ++deg[a-1];
    end

    @vec[int] s;
    dsu d; d:init(n);

    for(i=0; i<n; ++i) if(!deg[i])
        s:push(i) end end

    while(s.sz)
        i = s:back(); s:pop();

        for(j=0; j<bdj[i].sz; ++j) d:merge(i, bdj[i].d[j]) end

        res[i] = d:size(i);

        for(j=0; j<adj[i].sz; ++j) if(!--deg[nxt])
            s:push(nxt) end end
    end

    for(i=0; i<n; ++i) @raw res[i] " \n"[i==n-1] end
end

/*

1 -> 2 -> 3
1 ------> 3 ------> 5
1 -----------> 4 -> 5

t: 1 2 3 4 5

*/

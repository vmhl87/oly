#include <iframe>
#include <vec>

#define nxt adj[i].d[j]

@cgmain

@vec[int][2e5] adj;
@m int n, k1, k2;
ll res;

bool[2e5] vis;

// centroid decmp
    int[2e5] w;

    fn pick(int i, int p, int sz) -> int:
        w[i] = 1;

        int res = sz-1;
        bool work = 1;

        int j;
        for(j=0; j<adj[i].sz; ++j) if(nxt!=p && !vis[nxt])
            int r = pick(nxt, i, sz);
            if(r!=-1) return r end
            w[i] = w[i] + w[nxt];
            work = work & (w[nxt] <= sz/2);
            res = res - w[nxt];
        end end

        if(res <= (sz/2) && work) return i end
        return -1;
    end

    fn count(int i, int p) -> int:
        int res = 1;
        
        int j;
        for(j=0; j<adj[i].sz; ++j) if(nxt!=p && !vis[nxt])
            res = res + count(nxt, i);
        end end

        return res;
    end

    fn centroid(int i) -> int:
        int sz = count(i, -1);
        return pick(i, -1, sz);
    end

// divide and conquer
    ll[2e5+1] build;
    ll[2e5+1] final;
    int maxd;

    fn depths(int i, int p, int d):
        if(maxd < d) maxd = d end
        if(d > k2) return end
        ++build[d];

        int j;
        for(j=0; j<adj[i].sz; ++j) if(nxt!=p && !vis[nxt])
            depths(nxt, i, d+1);
        end end
    end

    fn divide(int i):
        i = centroid(i);

        vis[i] = 1;

        int sz=count(i, -1);
        if(sz > k2) sz = k2 end
        if(sz < k1) return end

        int j;
        for(j=0; j<adj[i].sz; ++j) if(!vis[nxt])
            maxd = 0; depths(nxt, i, 1);

            int l;
            ll r = 0;
            for(l=k1; l<=maxd; ++l) r = r + build[l] end
            for(l=0; l<k1; ++l)
                res = res - build[l]*r;
                r = r - build[k2-l];
                r = r + build[k1-l-1];
            end
            for(l=k1; l<=maxd; ++l)
                res = res - build[l]*r;
                r = r - build[k2-l];
            end

            for(l=0; l<=maxd; ++l)
                final[l] = final[l] + build[l];
                build[l] = 0;
            end
        end end

        ++final[0];

        ll r = 0;
        for(j=k1; j<=sz; ++j) r = r + final[j] end
        for(j=0; j<k1; ++j)
            res = res + final[j]*r;
            r = r - final[k2-j];
            r = r + final[k1-j-1];
        end
        for(j=k1; j<=sz; ++j)
            res = res + final[j]*r;
            r = r - final[k2-j];
        end

        for(j=0; j<=sz; ++j) final[j] = 0 end

        for(j=0; j<adj[i].sz; ++j) if(!vis[nxt])
            divide(nxt);
        end end
    end

fn inline main:
    @poll n k1 k2;

    for(i=1; i<n; ++i)
        @m int a, b; @poll a b;
        adj[a-1]:push(b-1);
        adj[b-1]:push(a-1);
    end

    // extreme cheese
    if(k1==1 && k2==n)
        res = n; res = res * (n-1);
        @fmt res/2;
        return;
    end

    divide(0);

    @fmt res/2;
end

#include <iframe>
#include <vec>

#define nxt adj[i].d[j]

@cgmain

@vec[int][2e5] adj;
@m int n, k1, k2;

bool[2e5] vis;

// centroid decmp
    int[2e5] w;

    fn pick(int i, int p, int sz) -> int:
        w[i] = 1;

        int res = sz-1;
        bool work = 1;

        int j;
        for(j=0; j<adj[i].sz; ++j) if(nxt!=p && !vis[nxt])
            int r = pick(nxt, i, sz);
            if(r!=-1) return r end
            w[i] = w[i] + w[nxt];
            work = work & (w[nxt] <= sz/2);
            res = res - w[nxt];
        end end

        if(res <= (sz/2) && work) return i end
        return -1;
    end

    fn count(int i, int p) -> int:
        int res = 1;
        
        int j;
        for(j=0; j<adj[i].sz; ++j) if(nxt!=p && !vis[nxt])
            res = res + count(nxt, i);
        end end

        return res;
    end

    fn centroid(int i) -> int:
        int sz = count(i, -1);
        return pick(i, -1, sz);
    end

ll[2e5+1] build;
ll[2e5+1] final;
int maxd;
ll res;

fn depths(int i, int p, int d):
    if(maxd < d) maxd = d end
    if(d > k) return end
    ++build[d];

    int j;
    for(j=0; j<adj[i].sz; ++j) if(nxt!=p && !vis[nxt])
        depths(nxt, i, d+1);
    end end
end

fn divide(int i):
    i = centroid(i);

    vis[i] = 1;

    if(count(i, -1) >= k2)
        int j;
        for(j=0; j<=k2; ++j) final[j] = 0 end

        for(j=0; j<adj[i].sz; ++j) if(!vis[nxt])
            maxd = 0;

            depths(nxt, i, 1);

            // UPD
            int l;
            for(l=0; l<=maxd; ++l)
                if(l+l>k) break end
                res = res - build[l]*build[k-l] * (1 + (l+l!=k))
            end

            for(l=0; l<=maxd; ++l)
                final[l] = final[l] + build[l];
                build[l] = 0;
            end
        end end

        ++final[0];

        // UPD
        for(j=0; j+j<=k2; ++j)
            res = res + final[j]*final[k-j] * (1 + (j+j!=k))
        end

        for(j=0; j<adj[i].sz; ++j) if(!vis[nxt])
            divide(nxt);
        end end
    end
end

fn inline main:
    @poll n k1 k2;

    for(i=1; i<n; ++i)
        @m int a, b; @poll a b;
        adj[a-1]:push(b-1);
        adj[b-1]:push(a-1);
    end

    divide(0);

    @fmt res/2;
end
